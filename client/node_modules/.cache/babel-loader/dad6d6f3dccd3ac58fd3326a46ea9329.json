{"ast":null,"code":"var _jsxFileName = \"/home/dci/Desktop/service-exchange-platform-finalProject/client/src/Components/userAccount/Register.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport RegistrationForm from './forms/RegistrationForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Register = () => {\n  _s();\n\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const [passWord, setPassWord] = useState(\"\");\n  const [confirmPW, setConfirmPW] = useState(\"\");\n  const [country, setCountry] = useState(\"\"); //for RegionCountrySelector package\n\n  const [region, setRegion] = useState(\"\"); //for RegionCountrySelector pack\n\n  const [alertEM, setAlertEM] = useState(false);\n  const [alertPW, setAlertPW] = useState(false);\n  const [alertPWCheck, setAlertPWCheck] = useState(false);\n\n  const postNewUser = data => {\n    console.log(data); //fetch to send data to backend\n\n    fetch('http://localhost:4000/register', {\n      method: \"POST\",\n      headers: {\n        'Context-Type': 'application/json'\n      },\n      body: JSON.stringify(data) //backend will receive this in: req.body\n\n    }).then(res => res.json()).then(newUserCreated => console.log(newUserCreated)).catch(err => console.log(err));\n  };\n\n  const submitHandler = e => {\n    e.preventDefault(); //email validator source: \n    //At least 8 characters long;\n    //One lowercase, one uppercase, one number and one special character;\n    //No whitespaces. use https://regexr.com/ and https://regex101.com/ for writing up and testing regex\n    //source: https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a (section 6)\n\n    const emailValidator = /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,15}$/;\n    const isEmValid = emailValidator.test(email);\n\n    if (!isEmValid) {\n      setAlertEM(true);\n      setTimeout(() => {\n        setAlertEM(false);\n      }, 5000);\n      return false;\n    }\n\n    const pwValidator = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])([a-zA-Z0-9@$!%*?&]{8,12})$/;\n    const isPwValid = pwValidator.test(passWord);\n\n    if (!isPwValid) {\n      setAlertPW(true);\n      setTimeout(() => {\n        setAlertPW(false);\n      }, 5000);\n      return false;\n    }\n\n    if (isEmValid && isPwValid && passWord !== confirmPW) {\n      setAlertPWCheck(true);\n      setTimeout(() => {\n        setAlertPWCheck(false);\n      }, 5000);\n      return false;\n    }\n\n    setFirstName(\"\");\n    setLastName(\"\");\n    setCountry(\"\");\n    setRegion(\"\");\n    setEmail(\"\");\n    setUserName(\"\");\n    setPassWord(\"\");\n    setConfirmPW(\"\");\n  };\n\n  const changeFirstName = e => {\n    setFirstName(e.target.value);\n  };\n\n  const changeLastName = e => {\n    setLastName(e.target.value);\n  };\n\n  const changeEmail = e => {\n    setEmail(e.target.value);\n  };\n\n  const changeUserName = e => {\n    setUserName(e.target.value);\n  };\n\n  const changePassWord = e => {\n    setPassWord(e.target.value);\n  };\n\n  const changeConfirmPW = e => {\n    setConfirmPW(e.target.value);\n  };\n\n  const changeCountry = val => {\n    setCountry(val);\n  };\n\n  const changeRegion = val => {\n    setRegion(val);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(RegistrationForm, {\n      postNewUser: postNewUser,\n      submitHandler: submitHandler,\n      changeFirstName: changeFirstName,\n      changeLastName: changeLastName,\n      changeEmail: changeEmail,\n      changeUserName: changeUserName,\n      changePassWord: changePassWord,\n      changeConfirmPW: changeConfirmPW,\n      changeCountry: changeCountry,\n      changeRegion: changeRegion,\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      userName: userName,\n      country: country,\n      region: region,\n      passWord: passWord,\n      confirmPW: confirmPW,\n      alertEM: alertEM,\n      alertPW: alertPW,\n      alertPWCheck: alertPWCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Register, \"VBYK0GQL6hdNgZ8M8XcTIMpNIS0=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/dci/Desktop/service-exchange-platform-finalProject/client/src/Components/userAccount/Register.jsx"],"names":["React","useState","RegistrationForm","Register","firstName","setFirstName","lastName","setLastName","email","setEmail","userName","setUserName","passWord","setPassWord","confirmPW","setConfirmPW","country","setCountry","region","setRegion","alertEM","setAlertEM","alertPW","setAlertPW","alertPWCheck","setAlertPWCheck","postNewUser","data","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","newUserCreated","catch","err","submitHandler","e","preventDefault","emailValidator","isEmValid","test","setTimeout","pwValidator","isPwValid","changeFirstName","target","value","changeLastName","changeEmail","changeUserName","changePassWord","changeConfirmPW","changeCountry","val","changeRegion"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport RegistrationForm from './forms/RegistrationForm'\n\nconst Register = () => {\n     \n     const [firstName, setFirstName] = useState(\"\");\n     const [lastName, setLastName] = useState(\"\"); \n     const [email, setEmail] = useState(\"\");     \n     const [userName, setUserName] = useState(\"\");\n     const [passWord, setPassWord] = useState(\"\");\n     const [confirmPW, setConfirmPW] = useState(\"\"); \n\n     const [country, setCountry] = useState(\"\"); //for RegionCountrySelector package\n     const [region, setRegion] = useState(\"\"); //for RegionCountrySelector pack\n   \n     const [alertEM, setAlertEM] = useState (false);  \n     const [alertPW, setAlertPW] = useState (false);\n     const [alertPWCheck, setAlertPWCheck] = useState (false);  \n\n    const postNewUser = (data) =>{\n        console.log(data);\n\n        //fetch to send data to backend\n        fetch('http://localhost:4000/register', {\n            method: \"POST\",\n            headers: { 'Context-Type': 'application/json'},\n            body: JSON.stringify(data)\n            //backend will receive this in: req.body\n        })\n        .then(res=>res.json())\n        .then(newUserCreated => console.log(newUserCreated))\n        .catch(err=>console.log(err))\n    }\n    \n     const submitHandler = (e) => {\n         e.preventDefault();  \n        \n        //email validator source: \n        //At least 8 characters long;\n        //One lowercase, one uppercase, one number and one special character;\n        //No whitespaces. use https://regexr.com/ and https://regex101.com/ for writing up and testing regex\n        //source: https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a (section 6)\n        \n        const emailValidator = /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,15}$/\n        const isEmValid = emailValidator.test(email);        \n        \n        if(!isEmValid ){\n            setAlertEM(true)\n            setTimeout(() => {\n                setAlertEM(false)\n            }, 5000); \n            return false;           \n        }\n        \n        const pwValidator = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])([a-zA-Z0-9@$!%*?&]{8,12})$/\n        const isPwValid = pwValidator.test(passWord);\n\n        if(!isPwValid){\n            setAlertPW(true)\n            setTimeout(() => {\n                setAlertPW(false)\n            }, 5000); \n            return false;                    \n        }        \n       \n        if ((isEmValid && isPwValid) && (passWord!==confirmPW)) {\n            setAlertPWCheck(true)\n            setTimeout(() => {\n                setAlertPWCheck(false)\n            }, 5000); \n            return false;\n        }\n\n         setFirstName(\"\");\n         setLastName(\"\");\n         setCountry(\"\");\n         setRegion(\"\");\n         setEmail(\"\");\n         setUserName(\"\");\n         setPassWord(\"\");\n         setConfirmPW(\"\");             \n    }    \n\n    const changeFirstName = (e) => {\n        setFirstName(e.target.value);\n    }\n\n    const changeLastName = (e) => {\n        setLastName(e.target.value);\n    }\n\n    const changeEmail = (e) => {\n        setEmail(e.target.value);\n    }\n\n    const changeUserName = (e) => {\n        setUserName(e.target.value);\n    }\n\n    const changePassWord = (e) => {\n        setPassWord(e.target.value);\n    }\n\n    const changeConfirmPW = (e) => {\n        setConfirmPW(e.target.value);\n    }  \n\n    const changeCountry = (val) => {\n        setCountry(val)\n    }\n\n    const changeRegion = (val) => {\n        setRegion(val)\n    }\n\n     return (\n        <>\n        <RegistrationForm   \n                          postNewUser = { postNewUser }\n                          submitHandler = { submitHandler }\n                          changeFirstName = { changeFirstName }\n                          changeLastName = { changeLastName }\n                          changeEmail = { changeEmail }\n                          changeUserName = { changeUserName }\n                          changePassWord = { changePassWord }\n                          changeConfirmPW = { changeConfirmPW } \n                          changeCountry = { changeCountry } \n                          changeRegion = { changeRegion }\n                          firstName = { firstName }\n                          lastName = { lastName }\n                          email = { email }\n                          userName = { userName }\n                          country = { country }\n                          region = { region }\n                          passWord = { passWord }\n                          confirmPW = { confirmPW }\n                          alertEM = { alertEM }\n                          alertPW = { alertPW }\n                          alertPWCheck = { alertPWCheck }                   \n                          />      \n        </>\n    )\n}\n\nexport default Register"]},"metadata":{},"sourceType":"module"}