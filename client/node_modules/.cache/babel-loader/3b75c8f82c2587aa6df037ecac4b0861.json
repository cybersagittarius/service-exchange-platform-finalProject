{"ast":null,"code":"var _jsxFileName = \"/home/dci/Desktop/service-exchange-platform-finalProject/client/src/Components/userAccount/Register.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport RegistrationForm from './forms/RegistrationForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Register = () => {\n  _s();\n\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const [passWord, setPassWord] = useState(\"\");\n  const [confirmPW, setConfirmPW] = useState(\"\");\n  const [country, setCountry] = useState(\"\"); //for RegionCountrySelector package\n\n  const [region, setRegion] = useState(\"\"); //for RegionCountrySelector pack\n\n  const [preview, setPreview] = useState(\"\");\n  const [savedImage, setSavedImage] = useState(\"\");\n  const [offerSelection, setOfferSelection] = useState([]);\n  const [alertEM, setAlertEM] = useState(false);\n  const [alertPW, setAlertPW] = useState(false);\n  const [alertPWCheck, setAlertPWCheck] = useState(false);\n\n  const postNewUser = (firstName, lastName, country, region, email, userName, passWord, confirmPW, savedImage, offerSelection) => {\n    const data = {\n      firstName,\n      lastName,\n      country,\n      region,\n      email,\n      userName,\n      passWord,\n      confirmPW,\n      offerSelection\n    };\n    console.log(data); //fetch to send data to backend\n\n    fetch('http://localhost:3000/register', {\n      method: \"POST\",\n      headers: {\n        'Context-Type': 'application/json'\n      },\n      body: JSON.stringify(data) //backend will receive this in: req.body\n\n    }).then(res => {\n      console.log('res received');\n      res.json();\n    }).then(newUserCreated => console.log(newUserCreated)).catch(err => console.log(err));\n  };\n\n  const submitHandler = e => {\n    e.preventDefault(); //email validator source: \n    //At least 8 characters long;\n    //One lowercase, one uppercase, one number and one special character;\n    //No whitespaces. use https://regexr.com/ and https://regex101.com/ for writing up and testing regex\n    //source: https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a (section 6)\n\n    const emailValidator = /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,15}$/;\n    const isEmValid = emailValidator.test(email);\n\n    if (!isEmValid) {\n      setAlertEM(true);\n      setTimeout(() => {\n        setAlertEM(false);\n      }, 5000);\n      return false;\n    }\n\n    const pwValidator = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])([a-zA-Z0-9@$!%*?&]{8,12})$/;\n    const isPwValid = pwValidator.test(passWord);\n\n    if (!isPwValid) {\n      setAlertPW(true);\n      setTimeout(() => {\n        setAlertPW(false);\n      }, 5000);\n      return false;\n    }\n\n    if (isEmValid && isPwValid && passWord !== confirmPW) {\n      setAlertPWCheck(true);\n      setTimeout(() => {\n        setAlertPWCheck(false);\n      }, 5000);\n      return false;\n    }\n\n    postNewUser(firstName, lastName, country, region, email, userName, passWord, confirmPW, savedImage, offerSelection);\n    setFirstName(\"\");\n    setLastName(\"\");\n    setCountry(\"\");\n    setRegion(\"\");\n    setEmail(\"\");\n    setUserName(\"\");\n    setPassWord(\"\");\n    setConfirmPW(\"\");\n    setPreview(null);\n    setSavedImage(null);\n    setOfferSelection([]);\n  };\n\n  const changeFirstName = e => {\n    setFirstName(e.target.value);\n  };\n\n  const changeLastName = e => {\n    setLastName(e.target.value);\n  };\n\n  const changeEmail = e => {\n    setEmail(e.target.value);\n  };\n\n  const changeUserName = e => {\n    setUserName(e.target.value);\n  };\n\n  const changePassWord = e => {\n    setPassWord(e.target.value);\n  };\n\n  const changeConfirmPW = e => {\n    setConfirmPW(e.target.value);\n  };\n\n  const changeCountry = val => {\n    setCountry(val);\n  };\n\n  const changeRegion = val => {\n    setRegion(val);\n  }; // const onClosing = () => {  \n  //     console.log('onClose works!')      \n  //     setPreview(null);\n  //     setSavedImage(preview);    \n  //   }\n\n\n  const onCrop = preview => {\n    console.log('onCrop works');\n    setPreview(preview);\n    setSavedImage(preview);\n  };\n\n  const onBeforeFileLoad = e => {\n    console.log('onBeforeFile works!');\n\n    if (e.target.files[0].size >= 80000) {\n      alert(\"File is too big! The maximal file size is 80 KB\");\n      e.target.value = \"\";\n    }\n  };\n\n  const changeOfferSelection = selection => {\n    setOfferSelection(selection);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(RegistrationForm, {\n      postNewUser: postNewUser,\n      submitHandler: submitHandler,\n      changeFirstName: changeFirstName,\n      changeLastName: changeLastName,\n      changeEmail: changeEmail,\n      changeUserName: changeUserName,\n      changePassWord: changePassWord,\n      changeConfirmPW: changeConfirmPW,\n      changeCountry: changeCountry,\n      changeRegion: changeRegion,\n      changeOfferSelection: changeOfferSelection //   onCrop = {onCrop}\n      //   onClosing = {onClosing}\n      //   onBeforeFileLoad = {onBeforeFileLoad}\n      ,\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      userName: userName,\n      country: country,\n      region: region,\n      passWord: passWord,\n      confirmPW: confirmPW,\n      offerSelection: offerSelection,\n      alertEM: alertEM,\n      alertPW: alertPW,\n      alertPWCheck: alertPWCheck //props passing to grandchild of Avatar\n      //   onClosing = { onClosing }\n      ,\n      onCrop: onCrop,\n      onBeforeFileLoad: onBeforeFileLoad,\n      preview: preview,\n      savedImage: savedImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Register, \"6DzrvZ/4AxlXH/HFhFbnATSboaw=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/dci/Desktop/service-exchange-platform-finalProject/client/src/Components/userAccount/Register.jsx"],"names":["React","useState","RegistrationForm","Register","firstName","setFirstName","lastName","setLastName","email","setEmail","userName","setUserName","passWord","setPassWord","confirmPW","setConfirmPW","country","setCountry","region","setRegion","preview","setPreview","savedImage","setSavedImage","offerSelection","setOfferSelection","alertEM","setAlertEM","alertPW","setAlertPW","alertPWCheck","setAlertPWCheck","postNewUser","data","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","newUserCreated","catch","err","submitHandler","e","preventDefault","emailValidator","isEmValid","test","setTimeout","pwValidator","isPwValid","changeFirstName","target","value","changeLastName","changeEmail","changeUserName","changePassWord","changeConfirmPW","changeCountry","val","changeRegion","onCrop","onBeforeFileLoad","files","size","alert","changeOfferSelection","selection"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport RegistrationForm from './forms/RegistrationForm'\n\nconst Register = () => {\n     \n     const [firstName, setFirstName] = useState(\"\");\n     const [lastName, setLastName] = useState(\"\"); \n     const [email, setEmail] = useState(\"\");     \n     const [userName, setUserName] = useState(\"\");\n     const [passWord, setPassWord] = useState(\"\");\n     const [confirmPW, setConfirmPW] = useState(\"\"); \n\n     const [country, setCountry] = useState(\"\"); //for RegionCountrySelector package\n     const [region, setRegion] = useState(\"\"); //for RegionCountrySelector pack\n    \n     const [preview, setPreview] = useState(\"\");\n     const [savedImage, setSavedImage] = useState(\"\");\n\n     const [offerSelection, setOfferSelection] = useState([]);\n\n     const [alertEM, setAlertEM] = useState (false);  \n     const [alertPW, setAlertPW] = useState (false);\n     const [alertPWCheck, setAlertPWCheck] = useState (false);  \n\n\n\n    const postNewUser = (firstName, lastName, country, region, email, userName, passWord, confirmPW, savedImage, offerSelection) =>{\n\n        const data = {firstName, lastName, country, region, email, userName, passWord, confirmPW, offerSelection};\n\n        console.log(data);    \n\n        //fetch to send data to backend\n        fetch('http://localhost:3000/register', {\n            method: \"POST\",\n            headers: { 'Context-Type': 'application/json'},\n            body: JSON.stringify(data)\n            //backend will receive this in: req.body\n        })\n        .then(res=>{ \n            console.log('res received')\n            res.json()\n        })\n        .then(newUserCreated => console.log(newUserCreated))\n        .catch(err=>console.log(err))\n    }\n    \n     const submitHandler = (e) => {\n         e.preventDefault();  \n        \n        //email validator source: \n        //At least 8 characters long;\n        //One lowercase, one uppercase, one number and one special character;\n        //No whitespaces. use https://regexr.com/ and https://regex101.com/ for writing up and testing regex\n        //source: https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a (section 6)\n        \n        const emailValidator = /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,15}$/\n        const isEmValid = emailValidator.test(email);        \n        \n        if(!isEmValid ){\n            setAlertEM(true)\n            setTimeout(() => {\n                setAlertEM(false)\n            }, 5000); \n            return false;           \n        }\n        \n        const pwValidator = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])([a-zA-Z0-9@$!%*?&]{8,12})$/\n        const isPwValid = pwValidator.test(passWord);\n\n        if(!isPwValid){\n            setAlertPW(true)\n            setTimeout(() => {\n                setAlertPW(false)\n            }, 5000); \n            return false;                    \n        }        \n       \n        if ((isEmValid && isPwValid) && (passWord!==confirmPW)) {\n            setAlertPWCheck(true)\n            setTimeout(() => {\n                setAlertPWCheck(false)\n            }, 5000); \n            return false;\n        }\n\n        postNewUser(firstName, lastName, country, region, email, userName, passWord, confirmPW, savedImage, offerSelection);\n\n         setFirstName(\"\");\n         setLastName(\"\");\n         setCountry(\"\");\n         setRegion(\"\");\n         setEmail(\"\");\n         setUserName(\"\");\n         setPassWord(\"\");\n         setConfirmPW(\"\");\n         \n         setPreview(null);\n         setSavedImage(null);\n         \n         setOfferSelection([]);\n    }    \n\n    const changeFirstName = (e) => {\n        setFirstName(e.target.value);\n    }\n\n    const changeLastName = (e) => {\n        setLastName(e.target.value);\n    }\n\n    const changeEmail = (e) => {\n        setEmail(e.target.value);\n    }\n\n    const changeUserName = (e) => {\n        setUserName(e.target.value);\n    }\n\n    const changePassWord = (e) => {\n        setPassWord(e.target.value);\n    }\n\n    const changeConfirmPW = (e) => {\n        setConfirmPW(e.target.value);\n    }  \n\n    const changeCountry = (val) => {\n        setCountry(val)\n    }\n\n    const changeRegion = (val) => {\n        setRegion(val)\n    }\n\n    // const onClosing = () => {  \n    //     console.log('onClose works!')      \n    //     setPreview(null);\n    //     setSavedImage(preview);    \n    //   }\n    \n    const onCrop = (preview) => {\n        console.log('onCrop works')\n        setPreview(preview);\n        setSavedImage(preview);\n      }    \n      \n    const onBeforeFileLoad = (e) => {\n        console.log('onBeforeFile works!')\n        if(e.target.files[0].size >=80000) {\n          alert(\"File is too big! The maximal file size is 80 KB\");\n          e.target.value=\"\";\n        }\n    }\n    \n    const changeOfferSelection = (selection) => {\n        setOfferSelection(selection);\n        }    \n\n\n     return (\n        <>\n        <RegistrationForm   \n                          postNewUser = { postNewUser }\n                          submitHandler = { submitHandler }\n                          changeFirstName = { changeFirstName }\n                          changeLastName = { changeLastName }\n                          changeEmail = { changeEmail }\n                          changeUserName = { changeUserName }\n                          changePassWord = { changePassWord }\n                          changeConfirmPW = { changeConfirmPW } \n                          changeCountry = { changeCountry } \n                          changeRegion = { changeRegion }\n                          changeOfferSelection = { changeOfferSelection }\n                        //   onCrop = {onCrop}\n                        //   onClosing = {onClosing}\n                        //   onBeforeFileLoad = {onBeforeFileLoad}\n                          firstName = { firstName }\n                          lastName = { lastName }\n                          email = { email }\n                          userName = { userName }\n                          country = { country }\n                          region = { region }\n                          passWord = { passWord }\n                          confirmPW = { confirmPW }\n                          offerSelection = { offerSelection }\n                          alertEM = { alertEM }\n                          alertPW = { alertPW }\n                          alertPWCheck = { alertPWCheck }  \n                          \n                          //props passing to grandchild of Avatar\n                        //   onClosing = { onClosing }\n                          onCrop = { onCrop }\n                          onBeforeFileLoad ={ onBeforeFileLoad }\n                          preview= { preview }\n                          savedImage= { savedImage }\n                          />      \n        </>\n    )\n}\n\nexport default Register"]},"metadata":{},"sourceType":"module"}